// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for students and admins
model User {
  id              String   @id @default(cuid())
  firstname       String
  lastname        String?
  email           String   @unique
  password        String
  matricNumber    String?  @unique
  level           Int // 100, 200, 300, 400, 500
  currentSemester Int? // 1 or 2
  department      String?
  faculty         String?
  avatar          String?
  isAdmin         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bookmarks        Bookmark[]
  timetableEntries TimetableEntry[]
  materials        Material[] // Materials uploaded by this user (admin)
  pastQuestions    PastQuestion[] // Past questions uploaded by this user (admin)
  notifications    Notification[]
  sessions         Session[]

  @@map("users")
}

// Tutor model for course lecturers
model Tutor {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses CourseToTutor[]

  @@map("tutors")
}

// Course model
model Course {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., MTE 301
  title       String
  units       Int
  level       Int // 100, 200, 300, 400, 500
  semester    Int // 1 or 2
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  materials        Material[]
  pastQuestions    PastQuestion[]
  tutors           CourseToTutor[]
  timetableEntries TimetableEntry[]

  @@map("courses")
}

// Join table for many-to-many relationship between Course and Tutor
model CourseToTutor {
  id        String   @id @default(cuid())
  courseId  String
  tutorId   String
  createdAt DateTime @default(now())

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tutor  Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([courseId, tutorId])
  @@map("course_tutors")
}

// Material model for course materials (PDF only)
model Material {
  id           String   @id @default(cuid())
  title        String
  fileUrl      String
  courseId     String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("materials")
}

// PastQuestion model (PDF only)
model PastQuestion {
  id           String   @id @default(cuid())
  title        String
  year         Int
  fileUrl      String
  courseId     String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("past_questions")
}

// Bookmark model
model Bookmark {
  id        String   @id @default(cuid())
  title     String
  url       String
  icon      String // Store the icon name (e.g., "Compass", "Briefcase")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

// TimetableEntry model
model TimetableEntry {
  id        String   @id @default(cuid())
  day       String // Monday, Tuesday, etc.
  time      String // e.g., "9:00 AM - 11:00 AM"
  location  String
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("timetable_entries")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Session model for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// SystemSettings model for application configuration
model SystemSettings {
  id                String   @id @default(cuid())
  siteName          String   @default("Amatech Lasu - Student Learning Hub")
  siteDescription   String   @default("Access course materials and resources")
  maintenanceMode   Boolean  @default(false)
  allowRegistration Boolean  @default(true)
  defaultTheme      String   @default("light")
  smtpServer        String?
  smtpPort          String?
  smtpUsername      String?
  smtpPassword      String?
  fromEmail         String?
  fromName          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_settings")
}

// AIAssistantChat model to store chat history
model AIAssistantChat {
  id        String   @id @default(cuid())
  userId    String
  messages  Json[] // Array of message objects with sender, content, timestamp
  courseId  String? // Optional course context
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ai_assistant_chats")
}

// ActivityLog model for tracking user activity
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?  @db.Text
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("activity_logs")
}
