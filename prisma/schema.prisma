generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  firstname        String
  lastname         String?
  email            String           @unique
  password         String
  matricNumber     String?          @unique
  level            Int
  currentSemester  Int?
  department       String?
  faculty          String?
  avatar           String?
  isAdmin          Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bookmarks        Bookmark[]
  materials        Material[]
  notifications    Notification[]
  pastQuestions    PastQuestion[]
  sessions         Session[]
  timetableEntries TimetableEntry[]
  chatSessions     ChatSession[]

  @@index([level])
  @@index([isAdmin])
  @@index([currentSemester])
  @@map("users")
}

model Tutor {
  id        String          @id @default(cuid())
  name      String
  email     String          @unique
  avatar    String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  courses   CourseToTutor[]

  @@map("tutors")
}

model Course {
  id               String           @id @default(cuid())
  code             String           @unique
  title            String
  units            Int
  level            Int
  semester         Int
  description      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tutors           CourseToTutor[]
  materials        Material[]
  pastQuestions    PastQuestion[]
  timetableEntries TimetableEntry[]
  chatSessions     ChatSession[]

  @@index([level])
  @@index([semester])
  @@index([level, semester])
  @@map("courses")
}

model CourseToTutor {
  id        String   @id @default(cuid())
  courseId  String
  tutorId   String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([courseId, tutorId])
  @@index([tutorId])
  @@map("course_tutors")
}

model Material {
  id                    String           @id @default(cuid())
  title                 String
  fileUrl               String
  courseId              String
  uploadedById          String
  processed             Boolean          @default(false)
  processingStatus      String           @default("pending")
  processingError       String?
  chunksCount           Int              @default(0)
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  course                Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy            User             @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  chunks                MaterialChunk[]
  processingQueue       ProcessingQueue?

  @@index([processingStatus])
  @@index([courseId])
  @@index([uploadedById])
  @@index([courseId, processingStatus])
  @@index([createdAt(sort: Desc)])
  @@map("materials")
}

model MaterialChunk {
  id         String   @id @default(cuid())
  materialId String
  content    String   @db.Text
  embedding  Float[]
  chunkIndex Int
  pageNumber Int?
  metadata   Json?
  createdAt  DateTime @default(now())
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@index([materialId])
  @@index([chunkIndex])
  @@index([materialId, chunkIndex])
  @@map("material_chunks")
}

model ProcessingQueue {
  id          String    @id @default(cuid())
  materialId  String    @unique
  status      String    @default("pending")
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  error       String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
  @@map("processing_queue")
}

model ChatSession {
  id        String        @id @default(cuid())
  userId    String
  courseId  String?
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([userId, updatedAt(sort: Desc)])
  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  content   String      @db.Text
  role      String
  sources   String[]
  metadata  Json?
  createdAt DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([role])
  @@index([sessionId, createdAt(sort: Asc)])
  @@map("chat_messages")
}

model PastQuestion {
  id           String   @id @default(cuid())
  title        String
  year         Int
  fileUrl      String
  courseId     String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([year])
  @@index([uploadedById])
  @@index([createdAt(sort: Desc)])
  @@map("past_questions")
}

model Bookmark {
  id        String   @id @default(cuid())
  title     String
  url       String
  icon      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@map("bookmarks")
}

model TimetableEntry {
  id        String   @id @default(cuid())
  day       String
  time      String
  location  String
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  semester  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, semester])
  @@index([courseId])
  @@index([day])
  @@map("timetable_entries")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt(sort: Desc)])
  @@map("notifications")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model SystemSettings {
  id                String   @id @default(cuid())
  siteName          String   @default("Amatech Lasu - Student Learning Hub")
  siteDescription   String   @default("Access course materials and resources")
  maintenanceMode   Boolean  @default(false)
  allowRegistration Boolean  @default(true)
  defaultTheme      String   @default("light")
  smtpServer        String?
  smtpPort          String?
  smtpUsername      String?
  smtpPassword      String?
  fromEmail         String?
  fromName          String?
  cacheLifetime     Int?     @default(3600)
  maxUploadSize     Int?     @default(50)
  sessionTimeout    Int?     @default(120)
  debugMode         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("system_settings")
}

model AIAssistantChat {
  id        String   @id @default(cuid())
  userId    String
  messages  Json[]
  courseId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ai_assistant_chats")
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  details    Json?
  ipAddress  String?
  userAgent  String?
  endpoint   String?
  method     String?
  statusCode Int?
  duration   Int?
  error      String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([userId, createdAt(sort: Desc)])
  @@index([action])
  @@index([ipAddress])
  @@index([endpoint])
  @@index([statusCode])
  @@map("activity_logs")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetAt])
  @@map("rate_limits")
}

model IPBlock {
  id          String    @id @default(cuid())
  ipAddress   String    @unique
  reason      String
  blockedAt   DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  failedCount Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ipAddress])
  @@index([isActive])
  @@index([expiresAt])
  @@map("ip_blocks")
}
